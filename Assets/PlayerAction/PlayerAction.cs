//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/PlayerAction/PlayerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAction"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""bb6621d9-7e0a-4b5d-af78-df2582bc5d48"",
            ""actions"": [
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""e614f958-5f09-416d-8515-e7dc5344d0d4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f366558c-20e3-4597-8f23-109a546f73ef"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""93f2a104-accc-4748-a04a-a6dff92f2d51"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""80a7afd8-9466-422f-908e-fd03b9c1565b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""350c23b8-6c69-451c-8652-95ba9831b24c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""69ca12e2-f87f-4fdb-bcea-5db9eed4b70e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Shot"",
            ""id"": ""052902ad-be52-4496-b129-03d0ec6c0231"",
            ""actions"": [
                {
                    ""name"": ""Cross"",
                    ""type"": ""Button"",
                    ""id"": ""81ff8fc8-0bbc-4f89-b096-ca0c7553a0be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""84785f8e-6855-486a-a170-ad088d3d21f4"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cross"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf476b22-3639-49a1-822e-56feda2ede14"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cross"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a9ef01e-0c52-4025-9175-00d65e5b0fa4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cross"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38273e60-8e17-4533-ba17-0a5ad87a6cda"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cross"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Bomb"",
            ""id"": ""02ba8c7e-2e1f-4997-9fbf-c0631fac5df4"",
            ""actions"": [
                {
                    ""name"": ""Bomb"",
                    ""type"": ""Button"",
                    ""id"": ""d1a08402-9e93-4ec5-862b-aaa87c15390b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9b4cf0ec-98e5-4261-bb60-2ac007600be0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Active"",
            ""id"": ""cc1f08c8-5131-4729-b9c1-2c45ae941cb7"",
            ""actions"": [
                {
                    ""name"": ""Active"",
                    ""type"": ""Button"",
                    ""id"": ""f1d1d195-35ff-4faf-8ac9-a98aa5bcda1a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c991d9ef-da30-404b-97ba-cf41bde009f6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Active"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_WASD = m_Move.FindAction("WASD", throwIfNotFound: true);
        // Shot
        m_Shot = asset.FindActionMap("Shot", throwIfNotFound: true);
        m_Shot_Cross = m_Shot.FindAction("Cross", throwIfNotFound: true);
        // Bomb
        m_Bomb = asset.FindActionMap("Bomb", throwIfNotFound: true);
        m_Bomb_Bomb = m_Bomb.FindAction("Bomb", throwIfNotFound: true);
        // Active
        m_Active = asset.FindActionMap("Active", throwIfNotFound: true);
        m_Active_Active = m_Active.FindAction("Active", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private List<IMoveActions> m_MoveActionsCallbackInterfaces = new List<IMoveActions>();
    private readonly InputAction m_Move_WASD;
    public struct MoveActions
    {
        private @PlayerAction m_Wrapper;
        public MoveActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @WASD => m_Wrapper.m_Move_WASD;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void AddCallbacks(IMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveActionsCallbackInterfaces.Add(instance);
            @WASD.started += instance.OnWASD;
            @WASD.performed += instance.OnWASD;
            @WASD.canceled += instance.OnWASD;
        }

        private void UnregisterCallbacks(IMoveActions instance)
        {
            @WASD.started -= instance.OnWASD;
            @WASD.performed -= instance.OnWASD;
            @WASD.canceled -= instance.OnWASD;
        }

        public void RemoveCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveActions @Move => new MoveActions(this);

    // Shot
    private readonly InputActionMap m_Shot;
    private List<IShotActions> m_ShotActionsCallbackInterfaces = new List<IShotActions>();
    private readonly InputAction m_Shot_Cross;
    public struct ShotActions
    {
        private @PlayerAction m_Wrapper;
        public ShotActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Cross => m_Wrapper.m_Shot_Cross;
        public InputActionMap Get() { return m_Wrapper.m_Shot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShotActions set) { return set.Get(); }
        public void AddCallbacks(IShotActions instance)
        {
            if (instance == null || m_Wrapper.m_ShotActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShotActionsCallbackInterfaces.Add(instance);
            @Cross.started += instance.OnCross;
            @Cross.performed += instance.OnCross;
            @Cross.canceled += instance.OnCross;
        }

        private void UnregisterCallbacks(IShotActions instance)
        {
            @Cross.started -= instance.OnCross;
            @Cross.performed -= instance.OnCross;
            @Cross.canceled -= instance.OnCross;
        }

        public void RemoveCallbacks(IShotActions instance)
        {
            if (m_Wrapper.m_ShotActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShotActions instance)
        {
            foreach (var item in m_Wrapper.m_ShotActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShotActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShotActions @Shot => new ShotActions(this);

    // Bomb
    private readonly InputActionMap m_Bomb;
    private List<IBombActions> m_BombActionsCallbackInterfaces = new List<IBombActions>();
    private readonly InputAction m_Bomb_Bomb;
    public struct BombActions
    {
        private @PlayerAction m_Wrapper;
        public BombActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Bomb => m_Wrapper.m_Bomb_Bomb;
        public InputActionMap Get() { return m_Wrapper.m_Bomb; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BombActions set) { return set.Get(); }
        public void AddCallbacks(IBombActions instance)
        {
            if (instance == null || m_Wrapper.m_BombActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BombActionsCallbackInterfaces.Add(instance);
            @Bomb.started += instance.OnBomb;
            @Bomb.performed += instance.OnBomb;
            @Bomb.canceled += instance.OnBomb;
        }

        private void UnregisterCallbacks(IBombActions instance)
        {
            @Bomb.started -= instance.OnBomb;
            @Bomb.performed -= instance.OnBomb;
            @Bomb.canceled -= instance.OnBomb;
        }

        public void RemoveCallbacks(IBombActions instance)
        {
            if (m_Wrapper.m_BombActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBombActions instance)
        {
            foreach (var item in m_Wrapper.m_BombActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BombActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BombActions @Bomb => new BombActions(this);

    // Active
    private readonly InputActionMap m_Active;
    private List<IActiveActions> m_ActiveActionsCallbackInterfaces = new List<IActiveActions>();
    private readonly InputAction m_Active_Active;
    public struct ActiveActions
    {
        private @PlayerAction m_Wrapper;
        public ActiveActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Active => m_Wrapper.m_Active_Active;
        public InputActionMap Get() { return m_Wrapper.m_Active; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActiveActions set) { return set.Get(); }
        public void AddCallbacks(IActiveActions instance)
        {
            if (instance == null || m_Wrapper.m_ActiveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActiveActionsCallbackInterfaces.Add(instance);
            @Active.started += instance.OnActive;
            @Active.performed += instance.OnActive;
            @Active.canceled += instance.OnActive;
        }

        private void UnregisterCallbacks(IActiveActions instance)
        {
            @Active.started -= instance.OnActive;
            @Active.performed -= instance.OnActive;
            @Active.canceled -= instance.OnActive;
        }

        public void RemoveCallbacks(IActiveActions instance)
        {
            if (m_Wrapper.m_ActiveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActiveActions instance)
        {
            foreach (var item in m_Wrapper.m_ActiveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActiveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActiveActions @Active => new ActiveActions(this);
    public interface IMoveActions
    {
        void OnWASD(InputAction.CallbackContext context);
    }
    public interface IShotActions
    {
        void OnCross(InputAction.CallbackContext context);
    }
    public interface IBombActions
    {
        void OnBomb(InputAction.CallbackContext context);
    }
    public interface IActiveActions
    {
        void OnActive(InputAction.CallbackContext context);
    }
}
