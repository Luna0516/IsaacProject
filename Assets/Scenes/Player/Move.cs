//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Move.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Move: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Move()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Move"",
    ""maps"": [
        {
            ""name"": ""WASD"",
            ""id"": ""17b9420f-c33f-47ba-9ff9-7c195b25f3ac"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b7455ad6-39ce-4c8a-a826-2de5f34ac9fc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2db10411-b2c0-4f1c-8e9d-6faf2b65e425"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ce808636-ada7-42e1-bc20-1d22dacf4a2f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Isaac"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""493edb06-20ab-4b7b-931a-ee383bcb2c88"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Isaac"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""af709764-0e49-4f1c-9e77-5c1b4676b7c1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Isaac"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7149bb23-ca78-457c-ad87-e2d479a1b111"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Isaac"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Cross"",
            ""id"": ""65e40cbb-c9f5-4fa8-8780-ce7676279c8f"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""55410b7e-8cfc-40d1-85d0-8ddfeb076628"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""904114dc-2d10-4c1d-a7da-e80ed4f1ba95"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Isaac"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d668285f-9230-49ae-878c-47a51f111044"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Isaac"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9eb35a4e-d93c-4cac-8acb-2bbfad0bc53b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Isaac"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be59ec37-a6e8-4a5e-97c6-360e52c4d68d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Isaac"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""E"",
            ""id"": ""f12bee0c-7d15-4262-aa56-7a66261f4c24"",
            ""actions"": [
                {
                    ""name"": ""Bomb"",
                    ""type"": ""Button"",
                    ""id"": ""1597755c-051f-4a2d-ad80-8e220762f530"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d399e957-f8e0-4fca-86cd-21d5258b5235"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Isaac"",
                    ""action"": ""Bomb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Space"",
            ""id"": ""8a8a084f-39d4-434f-92d6-c6508469170e"",
            ""actions"": [
                {
                    ""name"": ""Active"",
                    ""type"": ""Button"",
                    ""id"": ""a835f1f2-d89f-4161-911e-9bb6119f8c0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6a82a42c-2504-4c3e-a51c-a53c44b59d16"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Isaac"",
                    ""action"": ""Active"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Isaac"",
            ""bindingGroup"": ""Isaac"",
            ""devices"": []
        }
    ]
}");
        // WASD
        m_WASD = asset.FindActionMap("WASD", throwIfNotFound: true);
        m_WASD_Move = m_WASD.FindAction("Move", throwIfNotFound: true);
        // Cross
        m_Cross = asset.FindActionMap("Cross", throwIfNotFound: true);
        m_Cross_Attack = m_Cross.FindAction("Attack", throwIfNotFound: true);
        // E
        m_E = asset.FindActionMap("E", throwIfNotFound: true);
        m_E_Bomb = m_E.FindAction("Bomb", throwIfNotFound: true);
        // Space
        m_Space = asset.FindActionMap("Space", throwIfNotFound: true);
        m_Space_Active = m_Space.FindAction("Active", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // WASD
    private readonly InputActionMap m_WASD;
    private List<IWASDActions> m_WASDActionsCallbackInterfaces = new List<IWASDActions>();
    private readonly InputAction m_WASD_Move;
    public struct WASDActions
    {
        private @Move m_Wrapper;
        public WASDActions(@Move wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_WASD_Move;
        public InputActionMap Get() { return m_Wrapper.m_WASD; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WASDActions set) { return set.Get(); }
        public void AddCallbacks(IWASDActions instance)
        {
            if (instance == null || m_Wrapper.m_WASDActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WASDActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IWASDActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IWASDActions instance)
        {
            if (m_Wrapper.m_WASDActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWASDActions instance)
        {
            foreach (var item in m_Wrapper.m_WASDActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WASDActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WASDActions @WASD => new WASDActions(this);

    // Cross
    private readonly InputActionMap m_Cross;
    private List<ICrossActions> m_CrossActionsCallbackInterfaces = new List<ICrossActions>();
    private readonly InputAction m_Cross_Attack;
    public struct CrossActions
    {
        private @Move m_Wrapper;
        public CrossActions(@Move wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Cross_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Cross; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CrossActions set) { return set.Get(); }
        public void AddCallbacks(ICrossActions instance)
        {
            if (instance == null || m_Wrapper.m_CrossActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CrossActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(ICrossActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(ICrossActions instance)
        {
            if (m_Wrapper.m_CrossActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICrossActions instance)
        {
            foreach (var item in m_Wrapper.m_CrossActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CrossActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CrossActions @Cross => new CrossActions(this);

    // E
    private readonly InputActionMap m_E;
    private List<IEActions> m_EActionsCallbackInterfaces = new List<IEActions>();
    private readonly InputAction m_E_Bomb;
    public struct EActions
    {
        private @Move m_Wrapper;
        public EActions(@Move wrapper) { m_Wrapper = wrapper; }
        public InputAction @Bomb => m_Wrapper.m_E_Bomb;
        public InputActionMap Get() { return m_Wrapper.m_E; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EActions set) { return set.Get(); }
        public void AddCallbacks(IEActions instance)
        {
            if (instance == null || m_Wrapper.m_EActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EActionsCallbackInterfaces.Add(instance);
            @Bomb.started += instance.OnBomb;
            @Bomb.performed += instance.OnBomb;
            @Bomb.canceled += instance.OnBomb;
        }

        private void UnregisterCallbacks(IEActions instance)
        {
            @Bomb.started -= instance.OnBomb;
            @Bomb.performed -= instance.OnBomb;
            @Bomb.canceled -= instance.OnBomb;
        }

        public void RemoveCallbacks(IEActions instance)
        {
            if (m_Wrapper.m_EActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEActions instance)
        {
            foreach (var item in m_Wrapper.m_EActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EActions @E => new EActions(this);

    // Space
    private readonly InputActionMap m_Space;
    private List<ISpaceActions> m_SpaceActionsCallbackInterfaces = new List<ISpaceActions>();
    private readonly InputAction m_Space_Active;
    public struct SpaceActions
    {
        private @Move m_Wrapper;
        public SpaceActions(@Move wrapper) { m_Wrapper = wrapper; }
        public InputAction @Active => m_Wrapper.m_Space_Active;
        public InputActionMap Get() { return m_Wrapper.m_Space; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpaceActions set) { return set.Get(); }
        public void AddCallbacks(ISpaceActions instance)
        {
            if (instance == null || m_Wrapper.m_SpaceActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpaceActionsCallbackInterfaces.Add(instance);
            @Active.started += instance.OnActive;
            @Active.performed += instance.OnActive;
            @Active.canceled += instance.OnActive;
        }

        private void UnregisterCallbacks(ISpaceActions instance)
        {
            @Active.started -= instance.OnActive;
            @Active.performed -= instance.OnActive;
            @Active.canceled -= instance.OnActive;
        }

        public void RemoveCallbacks(ISpaceActions instance)
        {
            if (m_Wrapper.m_SpaceActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpaceActions instance)
        {
            foreach (var item in m_Wrapper.m_SpaceActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpaceActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpaceActions @Space => new SpaceActions(this);
    private int m_IsaacSchemeIndex = -1;
    public InputControlScheme IsaacScheme
    {
        get
        {
            if (m_IsaacSchemeIndex == -1) m_IsaacSchemeIndex = asset.FindControlSchemeIndex("Isaac");
            return asset.controlSchemes[m_IsaacSchemeIndex];
        }
    }
    public interface IWASDActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface ICrossActions
    {
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IEActions
    {
        void OnBomb(InputAction.CallbackContext context);
    }
    public interface ISpaceActions
    {
        void OnActive(InputAction.CallbackContext context);
    }
}
